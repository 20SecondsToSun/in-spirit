<languageVersion : 1.0;>

kernel MedianSimple
<   namespace: "ru.inspirit";
	vendor: "Eugene Zatepyakin";
    version : 1;
    description : "Median Filter: 3x3";
>
{
    input image4 src;
    output pixel4 dst;
    
    // Sorts a 3x3 window of pixels to select median value for each channel.
    // Obviously a bubble sort aint great, the easiest i could do without loops.
    // Larger windows would benefit from an optomised sorting algorithm.
    //
    
    //#define swapr(t, a, b) t = a.r; a.r = b.r; b.r = t;
	//#define swapg(t, a, b) t = a.g; a.g = b.g; b.g = t;
	//#define swapb(t, a, b) t = a.b; a.b = b.b; b.b = t;

    void evaluatePixel()
    {
        // 3x3 window
        // tl tm tr
        // ml mm mr
        // bl bm br
        float2 pos = outCoord();
        float4 tl = sampleNearest(src, (pos + float2(-1, -1)));
        float4 tm = sampleNearest(src, pos + float2(0, -1));
        float4 tr = sampleNearest(src, pos + float2(1, -1));
        //
        float4 ml = sampleNearest(src, pos + float2(-1, 0));
        float4 mm = sampleNearest(src, pos);
        float4 mr = sampleNearest(src, pos + float2(1, 0));
        //
        float4 bl = sampleNearest(src, pos + float2(-1, 1));
        float4 bm = sampleNearest(src, pos + float2(0, 1));
        float4 br = sampleNearest(src, pos + float2(1, 1));
        
        float swap = 0.0;
        //
        // Red Channel sort.
        if(tl.r > tm.r) {swap=tl.r; tl.r=tm.r; tm.r=swap;};
        if(tl.r > tr.r) {swap=tl.r; tl.r=tr.r; tr.r=swap;};
        if(tl.r > ml.r) {swap=tl.r; tl.r=ml.r; ml.r=swap;};
        if(tl.r > mm.r) {swap=tl.r; tl.r=mm.r; mm.r=swap;};
        if(tl.r > mr.r) {swap=tl.r; tl.r=mr.r; mr.r=swap;};
        if(tl.r > bl.r) {swap=tl.r; tl.r=bl.r; bl.r=swap;};
        if(tl.r > bm.r) {swap=tl.r; tl.r=bm.r; bm.r=swap;};
        if(tl.r > br.r) {swap=tl.r; tl.r=br.r; br.r=swap;};
        if(tm.r > tr.r) {swap=tm.r; tm.r=tr.r; tr.r=swap;};
        if(tm.r > ml.r) {swap=tm.r; tm.r=ml.r; ml.r=swap;};
        if(tm.r > mm.r) {swap=tm.r; tm.r=mm.r; mm.r=swap;};
        if(tm.r > mr.r) {swap=tm.r; tm.r=mr.r; mr.r=swap;};
        if(tm.r > bl.r) {swap=tm.r; tm.r=bl.r; bl.r=swap;};
        if(tm.r > bm.r) {swap=tm.r; tm.r=bm.r; bm.r=swap;};
        if(tm.r > br.r) {swap=tm.r; tm.r=br.r; br.r=swap;};
        if(tr.r > ml.r) {swap=tr.r; tr.r=ml.r; ml.r=swap;};
        if(tr.r > mm.r) {swap=tr.r; tr.r=mm.r; mm.r=swap;};
        if(tr.r > mr.r) {swap=tr.r; tr.r=mr.r; mr.r=swap;};
        if(tr.r > bl.r) {swap=tr.r; tr.r=bl.r; bl.r=swap;};
        if(tr.r > bm.r) {swap=tr.r; tr.r=bm.r; bm.r=swap;};
        if(tr.r > br.r) {swap=tr.r; tr.r=br.r; br.r=swap;};
        if(ml.r > mm.r) {swap=ml.r; ml.r=mm.r; mm.r=swap;};
        if(ml.r > mr.r) {swap=ml.r; ml.r=mr.r; mr.r=swap;};
        if(ml.r > bl.r) {swap=ml.r; ml.r=bl.r; bl.r=swap;};
        if(ml.r > bm.r) {swap=ml.r; ml.r=bm.r; bm.r=swap;};
        if(ml.r > br.r) {swap=ml.r; ml.r=br.r; br.r=swap;};
        if(mm.r > mr.r) {swap=mm.r; mm.r=mr.r; mr.r=swap;};
        if(mm.r > bl.r) {swap=mm.r; mm.r=bl.r; bl.r=swap;};
        if(mm.r > bm.r) {swap=mm.r; mm.r=bm.r; bm.r=swap;};
        if(mm.r > br.r) {swap=mm.r; mm.r=br.r; br.r=swap;};
        if(mr.r > bl.r) {swap=mr.r; mr.r=bl.r; bl.r=swap;};
        if(mr.r > bm.r) {swap=mr.r; mr.r=bm.r; bm.r=swap;};
        if(mr.r > br.r) {swap=mr.r; mr.r=br.r; br.r=swap;};
        if(bl.r > bm.r) {swap=bl.r; bl.r=bm.r; bm.r=swap;};
        if(bl.r > br.r) {swap=bl.r; bl.r=br.r; br.r=swap;};
        if(bm.r > br.r) {swap=bm.r; bm.r=br.r; br.r=swap;};
		
		// GREEN
		
		if(tl.g > tm.g) {swap=tl.g; tl.g=tm.g; tm.g=swap;};
        if(tl.g > tr.g) {swap=tl.g; tl.g=tr.g; tr.g=swap;};
        if(tl.g > ml.g) {swap=tl.g; tl.g=ml.g; ml.g=swap;};
        if(tl.g > mm.g) {swap=tl.g; tl.g=mm.g; mm.g=swap;};
        if(tl.g > mr.g) {swap=tl.g; tl.g=mr.g; mr.g=swap;};
        if(tl.g > bl.g) {swap=tl.g; tl.g=bl.g; bl.g=swap;};
        if(tl.g > bm.g) {swap=tl.g; tl.g=bm.g; bm.g=swap;};
        if(tl.g > br.g) {swap=tl.g; tl.g=br.g; br.g=swap;};
        if(tm.g > tr.g) {swap=tm.g; tm.g=tr.g; tr.g=swap;};
        if(tm.g > ml.g) {swap=tm.g; tm.g=ml.g; ml.g=swap;};
        if(tm.g > mm.g) {swap=tm.g; tm.g=mm.g; mm.g=swap;};
        if(tm.g > mr.g) {swap=tm.g; tm.g=mr.g; mr.g=swap;};
        if(tm.g > bl.g) {swap=tm.g; tm.g=bl.g; bl.g=swap;};
        if(tm.g > bm.g) {swap=tm.g; tm.g=bm.g; bm.g=swap;};
        if(tm.g > br.g) {swap=tm.g; tm.g=br.g; br.g=swap;};
        if(tr.g > ml.g) {swap=tr.g; tr.g=ml.g; ml.g=swap;};
        if(tr.g > mm.g) {swap=tr.g; tr.g=mm.g; mm.g=swap;};
        if(tr.g > mr.g) {swap=tr.g; tr.g=mr.g; mr.g=swap;};
        if(tr.g > bl.g) {swap=tr.g; tr.g=bl.g; bl.g=swap;};
        if(tr.g > bm.g) {swap=tr.g; tr.g=bm.g; bm.g=swap;};
        if(tr.g > br.g) {swap=tr.g; tr.g=br.g; br.g=swap;};
        if(ml.g > mm.g) {swap=ml.g; ml.g=mm.g; mm.g=swap;};
        if(ml.g > mr.g) {swap=ml.g; ml.g=mr.g; mr.g=swap;};
        if(ml.g > bl.g) {swap=ml.g; ml.g=bl.g; bl.g=swap;};
        if(ml.g > bm.g) {swap=ml.g; ml.g=bm.g; bm.g=swap;};
        if(ml.g > br.g) {swap=ml.g; ml.g=br.g; br.g=swap;};
        if(mm.g > mr.g) {swap=mm.g; mm.g=mr.g; mr.g=swap;};
        if(mm.g > bl.g) {swap=mm.g; mm.g=bl.g; bl.g=swap;};
        if(mm.g > bm.g) {swap=mm.g; mm.g=bm.g; bm.g=swap;};
        if(mm.g > br.g) {swap=mm.g; mm.g=br.g; br.g=swap;};
        if(mr.g > bl.g) {swap=mr.g; mr.g=bl.g; bl.g=swap;};
        if(mr.g > bm.g) {swap=mr.g; mr.g=bm.g; bm.g=swap;};
        if(mr.g > br.g) {swap=mr.g; mr.g=br.g; br.g=swap;};
        if(bl.g > bm.g) {swap=bl.g; bl.g=bm.g; bm.g=swap;};
        if(bl.g > br.g) {swap=bl.g; bl.g=br.g; br.g=swap;};
        if(bm.g > br.g) {swap=bm.g; bm.g=br.g; br.g=swap;};
		//
		// BLUE
		
		if(tl.b > tm.b) {swap=tl.b; tl.b=tm.b; tm.b=swap;};
        if(tl.b > tr.b) {swap=tl.b; tl.b=tr.b; tr.b=swap;};
        if(tl.b > ml.b) {swap=tl.b; tl.b=ml.b; ml.b=swap;};
        if(tl.b > mm.b) {swap=tl.b; tl.b=mm.b; mm.b=swap;};
        if(tl.b > mr.b) {swap=tl.b; tl.b=mr.b; mr.b=swap;};
        if(tl.b > bl.b) {swap=tl.b; tl.b=bl.b; bl.b=swap;};
        if(tl.b > bm.b) {swap=tl.b; tl.b=bm.b; bm.b=swap;};
        if(tl.b > br.b) {swap=tl.b; tl.b=br.b; br.b=swap;};
        if(tm.b > tr.b) {swap=tm.b; tm.b=tr.b; tr.b=swap;};
        if(tm.b > ml.b) {swap=tm.b; tm.b=ml.b; ml.b=swap;};
        if(tm.b > mm.b) {swap=tm.b; tm.b=mm.b; mm.b=swap;};
        if(tm.b > mr.b) {swap=tm.b; tm.b=mr.b; mr.b=swap;};
        if(tm.b > bl.b) {swap=tm.b; tm.b=bl.b; bl.b=swap;};
        if(tm.b > bm.b) {swap=tm.b; tm.b=bm.b; bm.b=swap;};
        if(tm.b > br.b) {swap=tm.b; tm.b=br.b; br.b=swap;};
        if(tr.b > ml.b) {swap=tr.b; tr.b=ml.b; ml.b=swap;};
        if(tr.b > mm.b) {swap=tr.b; tr.b=mm.b; mm.b=swap;};
        if(tr.b > mr.b) {swap=tr.b; tr.b=mr.b; mr.b=swap;};
        if(tr.b > bl.b) {swap=tr.b; tr.b=bl.b; bl.b=swap;};
        if(tr.b > bm.b) {swap=tr.b; tr.b=bm.b; bm.b=swap;};
        if(tr.b > br.b) {swap=tr.b; tr.b=br.b; br.b=swap;};
        if(ml.b > mm.b) {swap=ml.b; ml.b=mm.b; mm.b=swap;};
        if(ml.b > mr.b) {swap=ml.b; ml.b=mr.b; mr.b=swap;};
        if(ml.b > bl.b) {swap=ml.b; ml.b=bl.b; bl.b=swap;};
        if(ml.b > bm.b) {swap=ml.b; ml.b=bm.b; bm.b=swap;};
        if(ml.b > br.b) {swap=ml.b; ml.b=br.b; br.b=swap;};
        if(mm.b > mr.b) {swap=mm.b; mm.b=mr.b; mr.b=swap;};
        if(mm.b > bl.b) {swap=mm.b; mm.b=bl.b; bl.b=swap;};
        if(mm.b > bm.b) {swap=mm.b; mm.b=bm.b; bm.b=swap;};
        if(mm.b > br.b) {swap=mm.b; mm.b=br.b; br.b=swap;};
        if(mr.b > bl.b) {swap=mr.b; mr.b=bl.b; bl.b=swap;};
        if(mr.b > bm.b) {swap=mr.b; mr.b=bm.b; bm.b=swap;};
        if(mr.b > br.b) {swap=mr.b; mr.b=br.b; br.b=swap;};
        if(bl.b > bm.b) {swap=bl.b; bl.b=bm.b; bm.b=swap;};
        if(bl.b > br.b) {swap=bl.b; bl.b=br.b; br.b=swap;};
        if(bm.b > br.b) {swap=bm.b; bm.b=br.b; br.b=swap;};
		
        // Maintain alhpa
        dst = sampleNearest(src,outCoord());
        // Apply Median value to output.
        dst.r = mm.r;
        dst.g = mm.g;
        dst.b = mm.b;
        
    }
}
