<languageVersion : 1.0;>

kernel MedianSimple
<   namespace: "ru.inspirit";
	vendor: "Eugene Zatepyakin & Mario Klingemann";
    version : 1;
    description : "Median Filter: 5x5";
>
{
    input image4 src;
    output pixel4 dst;

    // Sorts a 5x5 window of pixels to select median value for each channel.
    // Obviously a bubble sort aint great, the easiest i could do without loops.
    // Larger windows would benefit from an optomised sorting algorithm.
    //
    // Optimized by Mario Klingemann
    // http://www.quasimondo.com

    #define comp(a,b,m) m = max( a, b ); b = a + b - m; a = m;

    void evaluatePixel()
    {
        float2 pos = outCoord();
        float3 mm = sampleNearest(src, pos ).rgb;
        pos.x -= 1.0;
        float3 ml = sampleNearest(src, pos ).rgb;
        pos.y -= 1.0;
        float3 tl = sampleNearest(src, pos ).rgb;
        pos.x += 1.0;
        float3 tm = sampleNearest(src, pos ).rgb;
        pos.x += 1.0;
        float3 tr = sampleNearest(src, pos ).rgb;
        pos.y += 1.0;
        float3 mr = sampleNearest(src, pos ).rgb;
        pos.y += 1.0;
        float3 br = sampleNearest(src, pos ).rgb;
        pos.x -= 1.0;
        float3 bm = sampleNearest(src, pos ).rgb;
        pos.x -= 1.0;
        float3 bl = sampleNearest(src, pos ).rgb;
        pos.x -= 1.0;
        float3 lbl = sampleNearest(src, pos ).rgb;
        pos.y -= 1.0;
        float3 llm = sampleNearest(src, pos ).rgb;
        pos.y -= 1.0;
        float3 llt = sampleNearest(src, pos ).rgb;
        pos.y -= 1.0;
        float3 tll = sampleNearest(src, pos ).rgb;
        pos.x += 1.0;
        float3 ttl = sampleNearest(src, pos ).rgb;
        pos.x += 1.0;
        float3 ttm = sampleNearest(src, pos ).rgb;
        pos.x += 1.0;
        float3 ttr = sampleNearest(src, pos ).rgb;
        pos.x += 1.0;
        float3 trr = sampleNearest(src, pos ).rgb;
        pos.y += 1.0;
        float3 rrt = sampleNearest(src, pos ).rgb;
        pos.y += 1.0;
        float3 rrm = sampleNearest(src, pos ).rgb;
        pos.y += 1.0;
        float3 rbr = sampleNearest(src, pos ).rgb;
        pos.y += 1.0;
        float3 brr = sampleNearest(src, pos ).rgb;
        pos.x -= 1.0;
        float3 bbr = sampleNearest(src, pos ).rgb;
        pos.x -= 1.0;
        float3 bbm = sampleNearest(src, pos ).rgb;
        pos.x -= 1.0;
        float3 bbl = sampleNearest(src, pos ).rgb;
        pos.x -= 1.0;
        float3 llb = sampleNearest(src, pos ).rgb;

        float3 swap = float3( 0.0,0.0,0.0 );

        comp(tll,ttl,swap);
        comp(tll,ttm,swap);
        comp(tll,ttr,swap);
        comp(tll,trr,swap);
        comp(tll,llt,swap);
        comp(tll,tl,swap);
        comp(tll,tm,swap);
        comp(tll,tr,swap);
        comp(tll,rrt,swap);
        comp(tll,llm,swap);
        comp(tll,ml,swap);
        comp(tll,mm,swap);
        comp(tll,mr,swap);
        comp(tll,rrm,swap);
        comp(tll,lbl,swap);
        comp(tll,bl,swap);
        comp(tll,bm,swap);
        comp(tll,br,swap);
        comp(tll,rbr,swap);
        comp(tll,llb,swap);
        comp(tll,bbl,swap);
        comp(tll,bbm,swap);
        comp(tll,bbr,swap);
        comp(tll,brr,swap);
        comp(ttl,ttm,swap);
        comp(ttl,ttr,swap);
        comp(ttl,trr,swap);
        comp(ttl,llt,swap);
        comp(ttl,tl,swap);
        comp(ttl,tm,swap);
        comp(ttl,tr,swap);
        comp(ttl,rrt,swap);
        comp(ttl,llm,swap);
        comp(ttl,ml,swap);
        comp(ttl,mm,swap);
        comp(ttl,mr,swap);
        comp(ttl,rrm,swap);
        comp(ttl,lbl,swap);
        comp(ttl,bl,swap);
        comp(ttl,bm,swap);
        comp(ttl,br,swap);
        comp(ttl,rbr,swap);
        comp(ttl,llb,swap);
        comp(ttl,bbl,swap);
        comp(ttl,bbm,swap);
        comp(ttl,bbr,swap);
        comp(ttl,brr,swap);


        comp(ttm,ttr,swap);
        comp(ttm,trr,swap);
        comp(ttm,llt,swap);
        comp(ttm,tl,swap);
        comp(ttm,tm,swap);
        comp(ttm,tr,swap);
        comp(ttm,rrt,swap);
        comp(ttm,llm,swap);
        comp(ttm,ml,swap);
        comp(ttm,mm,swap);
        comp(ttm,mr,swap);
        comp(ttm,rrm,swap);
        comp(ttm,lbl,swap);
        comp(ttm,bl,swap);
        comp(ttm,bm,swap);
        comp(ttm,br,swap);
        comp(ttm,rbr,swap);
        comp(ttm,llb,swap);
        comp(ttm,bbl,swap);
        comp(ttm,bbm,swap);
        comp(ttm,bbr,swap);
        comp(ttm,brr,swap);
        comp(ttr,trr,swap);
        comp(ttr,llt,swap);
        comp(ttr,tl,swap);
        comp(ttr,tm,swap);
        comp(ttr,tr,swap);
        comp(ttr,rrt,swap);
        comp(ttr,llm,swap);
        comp(ttr,ml,swap);
        comp(ttr,mm,swap);
        comp(ttr,mr,swap);
        comp(ttr,rrm,swap);
        comp(ttr,lbl,swap);
        comp(ttr,bl,swap);
        comp(ttr,bm,swap);
        comp(ttr,br,swap);
        comp(ttr,rbr,swap);
        comp(ttr,llb,swap);
        comp(ttr,bbl,swap);
        comp(ttr,bbm,swap);
        comp(ttr,bbr,swap);
        comp(ttr,brr,swap);
        comp(trr,llt,swap);
        comp(trr,tl,swap);
        comp(trr,tm,swap);
        comp(trr,tr,swap);
        comp(trr,rrt,swap);
        comp(trr,llm,swap);
        comp(trr,ml,swap);
        comp(trr,mm,swap);
        comp(trr,mr,swap);
        comp(trr,rrm,swap);
        comp(trr,lbl,swap);
        comp(trr,bl,swap);
        comp(trr,bm,swap);
        comp(trr,br,swap);
        comp(trr,rbr,swap);
        comp(trr,llb,swap);
        comp(trr,bbl,swap);
        comp(trr,bbm,swap);
        comp(trr,bbr,swap);
        comp(trr,brr,swap);
        comp(llt,tl,swap);
        comp(llt,tm,swap);
        comp(llt,tr,swap);
        comp(llt,rrt,swap);
        comp(llt,llm,swap);
        comp(llt,ml,swap);
        comp(llt,mm,swap);
        comp(llt,mr,swap);
        comp(llt,rrm,swap);
        comp(llt,lbl,swap);
        comp(llt,bl,swap);
        comp(llt,bm,swap);
        comp(llt,br,swap);
        comp(llt,rbr,swap);
        comp(llt,llb,swap);
        comp(llt,bbl,swap);
        comp(llt,bbm,swap);
        comp(llt,bbr,swap);
        comp(llt,brr,swap);
        comp(tl,tm,swap);
        comp(tl,tr,swap);
        comp(tl,rrt,swap);
        comp(tl,llm,swap);
        comp(tl,ml,swap);
        comp(tl,mm,swap);
        comp(tl,mr,swap);
        comp(tl,rrm,swap);
        comp(tl,lbl,swap);
        comp(tl,bl,swap);
        comp(tl,bm,swap);
        comp(tl,br,swap);
        comp(tl,rbr,swap);
        comp(tl,llb,swap);
        comp(tl,bbl,swap);
        comp(tl,bbm,swap);
        comp(tl,bbr,swap);
        comp(tl,brr,swap);
        comp(tm,tr,swap);
        comp(tm,rrt,swap);
        comp(tm,llm,swap);
        comp(tm,ml,swap);
        comp(tm,mm,swap);
        comp(tm,mr,swap);
        comp(tm,rrm,swap);
        comp(tm,lbl,swap);
        comp(tm,bl,swap);
        comp(tm,bm,swap);
        comp(tm,br,swap);
        comp(tm,rbr,swap);
        comp(tm,llb,swap);
        comp(tm,bbl,swap);
        comp(tm,bbm,swap);
        comp(tm,bbr,swap);
        comp(tm,brr,swap);
        comp(tr,rrt,swap);
        comp(tr,llm,swap);
        comp(tr,ml,swap);
        comp(tr,mm,swap);
        comp(tr,mr,swap);
        comp(tr,rrm,swap);
        comp(tr,lbl,swap);
        comp(tr,bl,swap);
        comp(tr,bm,swap);
        comp(tr,br,swap);
        comp(tr,rbr,swap);
        comp(tr,llb,swap);
        comp(tr,bbl,swap);
        comp(tr,bbm,swap);
        comp(tr,bbr,swap);
        comp(tr,brr,swap);
        comp(rrt,llm,swap);
        comp(rrt,ml,swap);
        comp(rrt,mm,swap);
        comp(rrt,mr,swap);
        comp(rrt,rrm,swap);
        comp(rrt,lbl,swap);
        comp(rrt,bl,swap);
        comp(rrt,bm,swap);
        comp(rrt,br,swap);
        comp(rrt,rbr,swap);
        comp(rrt,llb,swap);
        comp(rrt,bbl,swap);
        comp(rrt,bbm,swap);
        comp(rrt,bbr,swap);
        comp(rrt,brr,swap);
        comp(llm,ml,swap);
        comp(llm,mm,swap);
        comp(llm,mr,swap);
        comp(llm,rrm,swap);
        comp(llm,lbl,swap);
        comp(llm,bl,swap);
        comp(llm,bm,swap);
        comp(llm,br,swap);
        comp(llm,rbr,swap);
        comp(llm,llb,swap);
        comp(llm,bbl,swap);
        comp(llm,bbm,swap);
        comp(llm,bbr,swap);
        comp(llm,brr,swap);
        comp(ml,mm,swap);
        comp(ml,mr,swap);
        comp(ml,rrm,swap);
        comp(ml,lbl,swap);
        comp(ml,bl,swap);
        comp(ml,bm,swap);
        comp(ml,br,swap);
        comp(ml,rbr,swap);
        comp(ml,llb,swap);
        comp(ml,bbl,swap);
        comp(ml,bbm,swap);
        comp(ml,bbr,swap);
        comp(ml,brr,swap);
        comp(mm,mr,swap);
        comp(mm,rrm,swap);
        comp(mm,lbl,swap);
        comp(mm,bl,swap);
        comp(mm,bm,swap);
        comp(mm,br,swap);
        comp(mm,rbr,swap);
        comp(mm,llb,swap);
        comp(mm,bbl,swap);
        comp(mm,bbm,swap);
        comp(mm,bbr,swap);
        comp(mm,brr,swap);

        // Maintain alpha
        dst = sampleNearest(src,outCoord());
        // Apply Median value to output.
        dst.rgb = mm;

    }
}